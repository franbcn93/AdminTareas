{"version":3,"sources":["components/auth/Login.js","components/auth/NuevaCuenta.js","components/layout/Barra.js","context/proyectos/proyectoContext.js","context/tareas/tareaContext.js","components/proyectos/Proyecto.js","components/proyectos/ListadoProyectos.js","components/proyectos/NuevoProyecto.js","components/layout/Sidebar.js","components/tareas/FormTarea.js","components/tareas/Tarea.js","components/tareas/ListadoTareas.js","components/proyectos/Proyectos.js","types/index.js","context/proyectos/proyectoReducer.js","context/proyectos/ProyectoState.js","context/tareas/tareaReducer.js","config/axios.js","context/tareas/tareaState.js","App.js","reportWebVitals.js","index.js"],"names":["Login","useState","email","password","usuario","guardarUsuario","onChange","e","target","name","value","className","onSubmit","preventDefault","htmlFor","type","id","placeholder","to","NuevaCuenta","nombre","confirmar","Barra","href","proyectoContext","createContext","tareaContext","Proyecto","proyecto","proyectoActual","useContext","obtenerTareas","onClick","ListadoProyectos","proyectosContext","proyectos","obtenerProyectos","useEffect","length","map","NuevoProyecto","formulario","errorformulario","mostrarFormulario","agregarProyecto","mostrarError","guardarProyecto","Sidebar","FormTarea","tareasContext","tareaseleccionada","errortarea","agregarTarea","validarTarea","actualizarTarea","limpiarTarea","guardarTarea","tarea","trim","_id","Tarea","eliminarTarea","guardarTareaActual","cambiarEstado","estado","seleccionarTarea","ListadoTareas","eliminarProyecto","tareasproyecto","TransitionGroup","CSSTransition","timeout","classNames","Proyectos","FORMULARIO_PROYECTO","OBTENER_PROYECTOS","AGREGAR_PROYECTO","VALIDAR_FORMULARIO","PROYECTO_ACTUAL","ELIMINAR_PROYECTO","TAREAS_PROYECTO","AGREGAR_TAREA","VALIDAR_TAREA","ELIMINAR_TAREA","TAREA_ACTUAL","ACTUALIZAR_TAREA","LIMPIAR_TAREA","state","action","payload","filter","mensaje","ProyectoState","props","useReducer","proyectoReducer","dispatch","Provider","uuidv4","proyectoId","children","clienteAxios","axios","create","baseURL","process","REACT_APP_BACKEND_URL","TareaState","TareaReducer","a","console","log","get","params","resultado","data","tareas","post","delete","put","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b83fa9c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport const Login = () => {\n  // State para Iniciar Sesión\n  const [usuario, guardarUsuario] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  const { email, password } = usuario;\n\n  const onChange = (e) => {\n    guardarUsuario({\n      ...usuario,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  //   Cuando el usuario quiere iniciar sesión\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    // Validar que no haya campos vacios\n\n    // Pasarlo al Action\n  };\n\n  return (\n    <div className=\"form-usuario\">\n      {/* { alerta ? ( <div className={`alerta ${alerta.categoria}`}> {alerta.msg} </div> )  : null } */}\n\n      <div className=\"contenedor-form sombra-dark\">\n        <h1>Iniciar Sesión</h1>\n\n        <form onSubmit={onSubmit}>\n          <div className=\"campo-form\">\n            <label htmlFor=\"email\">Email</label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              placeholder=\"Tu Email\"\n              value={email}\n              onChange={onChange}\n            />\n          </div>\n\n          <div className=\"campo-form\">\n            <label htmlFor=\"password\">Password</label>\n            <input\n              type=\"password\"\n              id=\"password\"\n              name=\"password\"\n              placeholder=\"Tu Password\"\n              value={password}\n              onChange={onChange}\n            />\n          </div>\n\n          <div className=\"campo-form\">\n            <input\n              type=\"submit\"\n              className=\"btn btn-primario btn-block\"\n              value=\"Iniciar Sesión\"\n            />\n          </div>\n        </form>\n\n        <Link to={\"/nueva-cuenta\"} className=\"enlace-cuenta\">\n          Obtener Cuenta\n        </Link>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport const NuevaCuenta = () => {\n  // State para Iniciar Sesión\n  const [usuario, guardarUsuario] = useState({\n    nombre: \"\",\n    email: \"\",\n    password: \"\",\n    confirmar: \"\",\n  });\n\n  const { nombre, email, password, confirmar } = usuario;\n\n  const onChange = (e) => {\n    guardarUsuario({\n      ...usuario,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  //   Cuando el usuario quiere iniciar sesión\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    // Validar que no haya campos vacios\n\n    // Password minimo de 6 carácteres\n\n    // lOS 2 Passwords sean iguales\n\n    // Pasarlo al Action\n  };\n\n  return (\n    <div className=\"form-usuario\">\n      {/* { alerta ? ( <div className={`alerta ${alerta.categoria}`}> {alerta.msg} </div> )  : null } */}\n\n      <div className=\"contenedor-form sombra-dark\">\n        <h1>Obtener una cuenta</h1>\n\n        <form onSubmit={onSubmit}>\n          <div className=\"campo-form\">\n            <label htmlFor=\"email\">Nombre</label>\n            <input\n              type=\"text\"\n              id=\"nombre\"\n              name=\"nombre\"\n              placeholder=\"Tu nombre\"\n              value={nombre}\n              onChange={onChange}\n            />\n          </div>\n\n          <div className=\"campo-form\">\n            <label htmlFor=\"email\">Email</label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              placeholder=\"Tu Email\"\n              value={email}\n              onChange={onChange}\n            />\n          </div>\n\n          <div className=\"campo-form\">\n            <label htmlFor=\"password\">Password</label>\n            <input\n              type=\"password\"\n              id=\"password\"\n              name=\"password\"\n              placeholder=\"Tu Password\"\n              value={password}\n              onChange={onChange}\n            />\n          </div>\n\n          <div className=\"campo-form\">\n            <label htmlFor=\"password\">Confirmar Password</label>\n            <input\n              type=\"password\"\n              id=\"confirmar\"\n              name=\"confirmar\"\n              placeholder=\"Repite tu Password\"\n              value={confirmar}\n              onChange={onChange}\n            />\n          </div>\n\n          <div className=\"campo-form\">\n            <input\n              type=\"submit\"\n              className=\"btn btn-primario btn-block\"\n              value=\"Registrarme\"\n            />\n          </div>\n        </form>\n\n        <Link to={\"/\"} className=\"enlace-cuenta\">\n          Volver a Iniciar Sesión\n        </Link>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const Barra = () => {\n  return (\n    <header className=\"app-header\">\n      <p className=\"nombre-usuario\">\n        Hola\n        <span> Francisco París</span>\n      </p>\n      <nav className=\"nav-principal\">\n        <a href=\"#!\">Cerrar Sesión</a>\n      </nav>\n    </header>\n  );\n};\n","import { createContext } from \"react\";\n\nconst proyectoContext = createContext();\n\nexport default proyectoContext;\n","import { createContext } from \"react\";\n\nconst tareaContext = createContext();\n\nexport default tareaContext;\n","import React, { useContext } from \"react\";\nimport proyectoContext from \"../../context/proyectos/proyectoContext\";\nimport tareaContext from \"../../context/tareas/tareaContext\";\n\nexport const Proyecto = ({ proyecto }) => {\n  // Obtener el state de proyectos\n  const proyectosContext = useContext(proyectoContext);\n  const { proyectoActual } = proyectosContext;\n\n  // obtener la función del context de tarea\n  const tareasContext = useContext(tareaContext);\n  const { obtenerTareas } = tareasContext;\n\n  // Función para agregar el proyecto actual\n  const seleccionarProyecto = (id) => {\n    proyectoActual(id); // Fijar un proyecto actual\n    obtenerTareas(id); // Filtrar las tareas cuando se de click\n  };\n\n  return (\n    <li>\n      <button\n        type=\"button\"\n        className=\"btn btn-blank\"\n        onClick={() => proyectoActual(proyecto.id)}\n      >\n        {proyecto.nombre}{\" \"}\n      </button>\n    </li>\n  );\n};\n","import React, { useContext, useEffect } from \"react\";\nimport proyectoContext from \"../../context/proyectos/proyectoContext\";\nimport { Proyecto } from \"./Proyecto\";\n\nexport const ListadoProyectos = () => {\n  // Extraer proyectos de state inicial\n  const proyectosContext = useContext(proyectoContext);\n  const { proyectos, obtenerProyectos } = proyectosContext;\n\n  // Obtener proyectos cuando carga el componente\n  useEffect(() => {\n    obtenerProyectos();\n  }, []);\n  // Revisar si proyectos tiene contenido\n  if (proyectos.length === 0)\n    return <p>No hay proyectos, comienza creando uno</p>;\n\n  return (\n    <ul className=\"listado-proyectos\">\n      {proyectos.map((proyecto) => (\n        <Proyecto key={proyecto.id} proyecto={proyecto} />\n      ))}\n    </ul>\n  );\n};\n","import React, { Fragment, useState, useContext } from \"react\";\nimport proyectoContext from \"../../context/proyectos/proyectoContext\";\n\nexport const NuevoProyecto = () => {\n  // Obtener el state del formulario\n  const proyectosContext = useContext(proyectoContext);\n  const {\n    formulario,\n    errorformulario,\n    mostrarFormulario,\n    agregarProyecto,\n    mostrarError,\n  } = proyectosContext;\n\n  // State para Proyecto\n  const [proyecto, guardarProyecto] = useState({\n    nombre: \"\",\n  });\n\n  // Extraer nombre de proyecto\n  const { nombre } = proyecto;\n\n  // Lee los contenidos del input\n  const onChangeProyecto = (e) => {\n    guardarProyecto({\n      ...proyecto,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  // Cuando el usuario envia un proyecto\n  const onSubmitProyecto = (e) => {\n    e.preventDefault();\n\n    // Validar el proyecto\n    if (nombre === \"\") {\n      mostrarError();\n      return;\n    }\n\n    // agregar al state\n    agregarProyecto(proyecto);\n\n    // Reiniciar el form\n    guardarProyecto({\n      nombre: \"\",\n    });\n  };\n\n  // Mostrar el formulario\n  const onClickFormulario = () => {\n    mostrarFormulario();\n  };\n\n  return (\n    <Fragment>\n      <button\n        type=\"button\"\n        className=\"btn btn-block btn-primario\"\n        onClick={onClickFormulario}\n      >\n        Nuevo Proyecto\n      </button>\n\n      {formulario ? (\n        <form className=\"formulario-nuevo-proyecto\" onSubmit={onSubmitProyecto}>\n          <input\n            type=\"text\"\n            className=\"input-text\"\n            placeholder=\"Nombre Proyecto\"\n            name=\"nombre\"\n            value={nombre}\n            onChange={onChangeProyecto}\n          />\n\n          <input\n            type=\"submit\"\n            className=\"btn btn-primario btn-block\"\n            value=\"Agregar Proyecto\"\n          />\n        </form>\n      ) : null}\n\n      {errorformulario ? (\n        <p className=\"mensaje error\">El nombre del Proyecto es obligatorio</p>\n      ) : null}\n    </Fragment>\n  );\n};\n","import React from \"react\";\nimport { ListadoProyectos } from \"../proyectos/ListadoProyectos\";\nimport { NuevoProyecto } from \"../proyectos/NuevoProyecto\";\n\nexport const Sidebar = () => {\n  return (\n    <aside>\n      <h1>\n        MERN<span>Task</span>\n      </h1>\n      <NuevoProyecto />\n      <div className=\"proyectos\">\n        <h2>Tus Proyectos</h2>\n        <ListadoProyectos />\n      </div>\n    </aside>\n  );\n};\n","import React, { useContext, useState, useEffect } from \"react\";\nimport proyectoContext from \"../../context/proyectos/proyectoContext\";\nimport tareaContext from \"../../context/tareas/tareaContext\";\n\nexport const FormTarea = () => {\n  // Extrar si un proyecto esta activo\n  const proyectosContext = useContext(proyectoContext);\n  const { proyecto } = proyectosContext;\n\n  // obtener la función del context de tarea\n  const tareasContext = useContext(tareaContext);\n  const {\n    tareaseleccionada,\n    errortarea,\n    agregarTarea,\n    validarTarea,\n    obtenerTareas,\n    actualizarTarea,\n    limpiarTarea,\n  } = tareasContext;\n\n  // Effect que detecta si hay una tarea seleccionada\n  useEffect(() => {\n    if (tareaseleccionada !== null) {\n      guardarTarea(tareaseleccionada);\n    } else {\n      guardarTarea({\n        nombre: \"\",\n      });\n    }\n  }, [tareaseleccionada]);\n\n  // State del formulario\n  const [tarea, guardarTarea] = useState({\n    nombre: \"\",\n  });\n\n  // extraer el nombre del proyecto\n  const { nombre } = tarea;\n\n  // Si no hay proyecto seleccionado\n  if (!proyecto) return null;\n\n  // Array destructuring para extraer el proyecto actual\n  const [proyectoActual] = proyecto;\n\n  // Leer los valores del formulario\n  const handleChange = (e) => {\n    guardarTarea({\n      ...tarea,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    // validar\n    if (nombre.trim() === \"\") {\n      validarTarea();\n      return;\n    }\n\n    // Si es edición o si es nueva tarea\n    if (tareaseleccionada === null) {\n      // agregar la nueva tarea al state de tareas\n      tarea.proyecto = proyectoActual._id;\n      agregarTarea(tarea);\n    } else {\n      // actualizar tarea existente\n      actualizarTarea(tarea);\n\n      // Elimina tareaseleccionada del state\n      limpiarTarea();\n    }\n    // Obtener y filtrar las tareas del proyecto actual\n    obtenerTareas(proyectoActual.id);\n\n    // reiniciar el form\n    guardarTarea({\n      nombre: \"\",\n    });\n  };\n\n  return (\n    <div className=\"formulario\">\n      <form onSubmit={onSubmit}>\n        <div className=\"contenedor-input\">\n          <input\n            type=\"text\"\n            className=\"input-text\"\n            placeholder=\"Nombre Tarea...\"\n            name=\"nombre\"\n            value={nombre}\n            onChange={handleChange}\n          />\n        </div>\n\n        <div className=\"contenedor-input\">\n          <input\n            type=\"submit\"\n            className=\"btn btn-primario btn-submit btn-block\"\n            value={tareaseleccionada ? \"Editar Tarea\" : \"Agregar Tarea\"}\n          />\n        </div>\n      </form>\n\n      {errortarea ? (\n        <p className=\"mensaje error\">El nombre de la tarea es obligatorio</p>\n      ) : null}\n    </div>\n  );\n};\n","import React, { useContext } from \"react\";\nimport proyectoContext from \"../../context/proyectos/proyectoContext\";\nimport tareaContext from \"../../context/tareas/tareaContext\";\n\nexport const Tarea = ({ tarea }) => {\n  // Extrar si un proyecto esta activo\n  const proyectosContext = useContext(proyectoContext);\n  const { proyecto } = proyectosContext;\n\n  // obtener la función del context de tarea\n  const tareasContext = useContext(tareaContext);\n  const { eliminarTarea, obtenerTareas, actualizarTarea, guardarTareaActual } =\n    tareasContext;\n\n  // Extraer el proyecto\n  const [proyectoActual] = proyecto;\n\n  // Función que se ejecuta cuando el usuario presiona el btn de eliminar tarea\n  const tareaEliminar = (id) => {\n    eliminarTarea(id, proyectoActual._id);\n    obtenerTareas(proyectoActual.id);\n  };\n\n  // Función que modifica el estado de las tareas\n  const cambiarEstado = (tarea) => {\n    if (tarea.estado) {\n      tarea.estado = false;\n    } else {\n      tarea.estado = true;\n    }\n    actualizarTarea(tarea);\n  };\n\n  // Agrega una tarea actual cuando el usuario desea editarla\n  const seleccionarTarea = (tarea) => {\n    guardarTareaActual(tarea);\n  };\n\n  return (\n    <li className=\"tarea sombra\">\n      <p>{tarea.nombre} </p>\n\n      <div className=\"estado\">\n        {tarea.estado ? (\n          <button\n            type=\"button\"\n            className=\"completo\"\n            onClick={() => cambiarEstado(tarea)}\n          >\n            Completo\n          </button>\n        ) : (\n          <button\n            type=\"button\"\n            className=\"incompleto\"\n            onClick={() => cambiarEstado(tarea)}\n          >\n            Incompleto\n          </button>\n        )}\n      </div>\n\n      <div className=\"acciones\">\n        <button\n          type=\"button\"\n          className=\"btn btn-primario\"\n          onClick={() => seleccionarTarea(tarea)}\n        >\n          Editar\n        </button>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-secundario\"\n          onClick={() => tareaEliminar(tarea._id)}\n        >\n          Eliminar\n        </button>\n      </div>\n    </li>\n  );\n};\n","import React, { Fragment, useContext } from \"react\";\nimport { Tarea } from \"./Tarea\";\nimport proyectoContext from \"../../context/proyectos/proyectoContext\";\nimport tareaContext from \"../../context/tareas/tareaContext\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nexport const ListadoTareas = () => {\n  // Extrar proyectos de state inicial\n  const proyectosContext = useContext(proyectoContext);\n  const { proyecto, eliminarProyecto } = proyectosContext;\n\n  // obtener las tareas del proyecto\n  const tareasContext = useContext(tareaContext);\n  const { tareasproyecto } = tareasContext;\n\n  // Si no hay proyecto seleccionado\n  if (!proyecto) return <h2>Selecciona un proyecto</h2>;\n\n  // Array destructuring para extraer el proyecto actual\n  const [proyectoActual] = proyecto;\n\n  // Elimina un proyecto\n  const onClickEliminar = () => {\n    eliminarProyecto(proyectoActual._id);\n  };\n\n  return (\n    <Fragment>\n      <h2>Proyecto: {proyectoActual.nombre} </h2>\n\n      <ul className=\"listado-tareas\">\n        {tareasproyecto.length === 0 ? (\n          <li className=\"tarea\">\n            <p>No hay tareas</p>\n          </li>\n        ) : (\n          <TransitionGroup>\n            {tareasproyecto.map((tarea) => (\n              <CSSTransition key={tarea.id} timeout={200} classNames=\"tarea\">\n                <Tarea tarea={tarea} />\n              </CSSTransition>\n            ))}\n          </TransitionGroup>\n        )}\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"btn btn-eliminar\"\n        onClick={onClickEliminar}\n      >\n        Eliminar Proyecto &times;\n      </button>\n    </Fragment>\n  );\n};\n","import React from \"react\";\nimport { Barra } from \"../layout/Barra\";\nimport { Sidebar } from \"../layout/Sidebar\";\nimport { FormTarea } from \"../tareas/FormTarea\";\nimport { ListadoTareas } from \"../tareas/ListadoTareas\";\n\nexport const Proyectos = () => {\n  return (\n    <div className=\"contenedor-app\">\n      <Sidebar />\n      <div className=\"seccion-principal\">\n        <Barra />\n        <main>\n          <FormTarea />\n          <div className=\"contenedor-tareas\"></div>\n          <ListadoTareas />\n        </main>\n      </div>\n    </div>\n  );\n};\n","export const FORMULARIO_PROYECTO = \"FORMULARIO_PROYECTO\";\nexport const OBTENER_PROYECTOS = \"OBTENER_PROYECTOS\";\nexport const AGREGAR_PROYECTO = \"AGREGAR_PROYECTO\";\nexport const VALIDAR_FORMULARIO = \"VALIDAR_FORMULARIO\";\nexport const PROYECTO_ACTUAL = \"PROYECTO_ACTUAL\";\nexport const ELIMINAR_PROYECTO = \"ELIMINAR_PROYECTO\";\nexport const PROYECTO_ERROR = \"PROYECTO_ERROR\";\n\nexport const TAREAS_PROYECTO = \"TAREAS_PROYECTO\";\nexport const AGREGAR_TAREA = \"AGREGAR_TAREA\";\nexport const VALIDAR_TAREA = \"VALIDAR_TAREA\";\nexport const ELIMINAR_TAREA = \"ELIMINAR_TAREA\";\nexport const TAREA_ACTUAL = \"TAREA_ACTUAL\";\nexport const ACTUALIZAR_TAREA = \"ACTUALIZAR_TAREA\";\nexport const LIMPIAR_TAREA = \"LIMPIAR_TAREA\";\n\nexport const MOSTRAR_ALERTA = \"MOSTRAR_ALERTA\";\nexport const OCULTAR_ALERTA = \"OCULTAR_ALERTA\";\n\nexport const REGISTRO_EXITOSO = \"REGISTRO_EXITOSO\";\nexport const REGISTRO_ERROR = \"REGISTRO_ERROR\";\nexport const OBTENER_USUARIO = \"OBTENER_USUARIO\";\nexport const LOGIN_EXITOSO = \"LOGIN_EXITOSO\";\nexport const LOGIN_ERROR = \"LOGIN_ERROR\";\nexport const CERRAR_SESION = \"CERRAR_SESION\";\n","import {\n  FORMULARIO_PROYECTO,\n  OBTENER_PROYECTOS,\n  AGREGAR_PROYECTO,\n  PROYECTO_ERROR,\n  VALIDAR_FORMULARIO,\n  PROYECTO_ACTUAL,\n  ELIMINAR_PROYECTO,\n} from \"../../types\";\n\nexport default (state, action) => {\n  switch (action.type) {\n    case FORMULARIO_PROYECTO:\n      return {\n        ...state,\n        formulario: true,\n      };\n    case OBTENER_PROYECTOS:\n      return {\n        ...state,\n        proyectos: action.payload,\n      };\n    case AGREGAR_PROYECTO:\n      return {\n        ...state,\n        proyectos: [...state.proyectos, action.payload],\n        formulario: false,\n        errorformulario: false,\n      };\n    case VALIDAR_FORMULARIO:\n      return {\n        ...state,\n        errorformulario: true,\n      };\n    case PROYECTO_ACTUAL:\n      return {\n        ...state,\n        proyecto: state.proyectos.filter(\n          (proyecto) => proyecto.id === action.payload\n        ),\n      };\n    case ELIMINAR_PROYECTO:\n      return {\n        ...state,\n        proyectos: state.proyectos.filter(\n          (proyecto) => proyecto.id !== action.payload\n        ),\n        proyecto: null,\n      };\n    case PROYECTO_ERROR:\n      return {\n        ...state,\n        mensaje: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import React, { useReducer } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport proyectoContext from \"./proyectoContext\";\nimport proyectoReducer from \"./proyectoReducer\";\nimport {\n  FORMULARIO_PROYECTO,\n  OBTENER_PROYECTOS,\n  AGREGAR_PROYECTO,\n  PROYECTO_ERROR,\n  VALIDAR_FORMULARIO,\n  PROYECTO_ACTUAL,\n  ELIMINAR_PROYECTO,\n} from \"../../types\";\n\nconst ProyectoState = (props) => {\n  const proyectos = [\n    { id: 1, nombre: \"Diseñio web\" },\n    { id: 2, nombre: \"Mantenimiento\" },\n  ];\n\n  const initialState = {\n    proyectos: [],\n    formulario: false,\n    errorformulario: false,\n    proyecto: null,\n    mensaje: null,\n  };\n\n  // Dispatch para ejecutar las acciones\n  const [state, dispatch] = useReducer(proyectoReducer, initialState);\n\n  // Serie de funciones para el CRUD\n  const mostrarFormulario = () => {\n    dispatch({\n      type: FORMULARIO_PROYECTO,\n    });\n  };\n\n  // Obtener proyectos\n  const obtenerProyectos = () => {\n    dispatch({\n      type: OBTENER_PROYECTOS,\n      payload: proyectos,\n    });\n  };\n\n  // Agregar nuevo proyecto\n  const agregarProyecto = (proyecto) => {\n    proyecto.id = uuidv4();\n\n    // Insertar el proyecto en el state\n    dispatch({\n      type: AGREGAR_PROYECTO,\n      payload: proyecto,\n    });\n  };\n\n  // Validar el formulario por errores\n  const mostrarError = () => {\n    dispatch({\n      type: VALIDAR_FORMULARIO,\n    });\n  };\n\n  // Selecciona el proyecto que el usuario dio click\n  const proyectoActual = (proyectoId) => {\n    dispatch({\n      type: PROYECTO_ACTUAL,\n      payload: proyectoId,\n    });\n  };\n\n  // Elimina un  proyecto\n  const eliminarProyecto = (proyectoId) => {\n    dispatch({\n      type: ELIMINAR_PROYECTO,\n      payload: proyectoId,\n    });\n  };\n\n  return (\n    <proyectoContext.Provider\n      value={{\n        proyectos: state.proyectos,\n        formulario: state.formulario,\n        errorformulario: state.errorformulario,\n        proyecto: state.proyecto,\n        mostrarFormulario,\n        obtenerProyectos,\n        agregarProyecto,\n        mostrarError,\n        proyectoActual,\n        eliminarProyecto,\n      }}\n    >\n      {props.children}\n    </proyectoContext.Provider>\n  );\n};\n\nexport default ProyectoState;\n","import {\n  TAREAS_PROYECTO,\n  AGREGAR_TAREA,\n  VALIDAR_TAREA,\n  ELIMINAR_TAREA,\n  TAREA_ACTUAL,\n  ACTUALIZAR_TAREA,\n  LIMPIAR_TAREA,\n} from \"../../types\";\n\nexport default (state, action) => {\n  switch (action.type) {\n    case TAREAS_PROYECTO:\n      return {\n        ...state,\n        tareasproyecto: action.payload,\n      };\n    case AGREGAR_TAREA:\n      return {\n        ...state,\n        tareasproyecto: [action.payload, ...state.tareasproyecto],\n        errortarea: false,\n      };\n    case VALIDAR_TAREA:\n      return {\n        ...state,\n        errortarea: true,\n      };\n    case ELIMINAR_TAREA:\n      return {\n        ...state,\n        tareasproyecto: state.tareasproyecto.filter(\n          (tarea) => tarea._id !== action.payload\n        ),\n      };\n    case ACTUALIZAR_TAREA:\n      return {\n        ...state,\n        tareasproyecto: state.tareasproyecto.map((tarea) =>\n          tarea._id === action.payload._id ? action.payload : tarea\n        ),\n      };\n    case TAREA_ACTUAL:\n      return {\n        ...state,\n        tareaseleccionada: action.payload,\n      };\n    case LIMPIAR_TAREA:\n      return {\n        ...state,\n        tareaseleccionada: null,\n      };\n    default:\n      return state;\n  }\n};\n","import axios from \"axios\";\n\nconst clienteAxios = axios.create({\n  baseURL: process.env.REACT_APP_BACKEND_URL,\n});\n\nexport default clienteAxios;\n","import React, { useReducer } from \"react\";\nimport TareaContext from \"./tareaContext\";\nimport TareaReducer from \"./tareaReducer\";\n\nimport {\n  TAREAS_PROYECTO,\n  AGREGAR_TAREA,\n  VALIDAR_TAREA,\n  ELIMINAR_TAREA,\n  TAREA_ACTUAL,\n  ACTUALIZAR_TAREA,\n  LIMPIAR_TAREA,\n} from \"../../types\";\n\nimport clienteAxios from \"../../config/axios\";\n\nconst TareaState = (props) => {\n  const initialState = {\n    tareasproyecto: [\n      { id: 1, nombre: \"Elegi Plataforma\", estado: true, proyectoId: 1 },\n      { id: 2, nombre: \"Elegi Colores\", estado: false, proyectoId: 2 },\n      { id: 3, nombre: \"Elegi Plataforma pago\", estado: true, proyectoId: 3 },\n      { id: 4, nombre: \"Elegi Hosting\", estado: false, proyectoId: 4 },\n      // { nombre: \"Elegi Plataforma\", estado: true, proyectoId: 2 },\n      // { nombre: \"Elegi Colores\", estado: false, proyectoId: 3 },\n      // { nombre: \"Elegi Plataforma pago\", estado: true, proyectoId: 3 },\n      // { nombre: \"Elegi Hosting\", estado: false, proyectoId: 4 },\n      // { nombre: \"Elegi Plataforma\", estado: true, proyectoId: 4 },\n      // { nombre: \"Elegi Colores\", estado: false, proyectoId: 2 },\n      // { nombre: \"Elegi Plataforma pago\", estado: true, proyectoId: 1 },\n      // { nombre: \"Elegi Hosting\", estado: false, proyectoId: 4 },\n    ],\n    errortarea: false,\n    tareaseleccionada: null,\n  };\n\n  // Crear dispatch y state\n  const [state, dispatch] = useReducer(TareaReducer, initialState);\n\n  // Crear las funciones\n\n  // Obtener las tareas de un proyecto\n  const obtenerTareas = async (proyecto) => {\n    console.log(proyecto);\n\n    try {\n      const resultado = await clienteAxios.get(\"/api/tareas\", {\n        params: { proyecto },\n      });\n      console.log(resultado);\n      dispatch({\n        type: TAREAS_PROYECTO,\n        payload: resultado.data.tareas,\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Agregar una tarea al proyecto seleccionado\n  const agregarTarea = async (tarea) => {\n    console.log(tarea);\n    try {\n      const resultado = await clienteAxios.post(\"/api/tareas\", tarea);\n      console.log(resultado);\n      dispatch({\n        type: AGREGAR_TAREA,\n        payload: tarea,\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Valida y muestra un error en caso de que sea necesario\n  const validarTarea = () => {\n    dispatch({\n      type: VALIDAR_TAREA,\n    });\n  };\n\n  // Eliminar tarea por id\n  const eliminarTarea = async (id, proyecto) => {\n    try {\n      await clienteAxios.delete(`/api/tareas/${id}`, { params: { proyecto } });\n      dispatch({\n        type: ELIMINAR_TAREA,\n        payload: id,\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Edita o modifica una tarea\n  const actualizarTarea = async (tarea) => {\n    try {\n      const resultado = await clienteAxios.put(\n        `/api/tareas/${tarea._id}`,\n        tarea\n      );\n\n      dispatch({\n        type: ACTUALIZAR_TAREA,\n        payload: resultado.data.tarea,\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Extrae una tarea para edición\n  const guardarTareaActual = (tarea) => {\n    dispatch({\n      type: TAREA_ACTUAL,\n      payload: tarea,\n    });\n  };\n\n  // Elimina la tareaseleccionada\n  const limpiarTarea = () => {\n    dispatch({\n      type: LIMPIAR_TAREA,\n    });\n  };\n\n  return (\n    <TareaContext.Provider\n      value={{\n        tareasproyecto: state.tareasproyecto,\n        errortarea: state.errortarea,\n        tareaseleccionada: state.tareaseleccionada,\n        obtenerTareas,\n        agregarTarea,\n        validarTarea,\n        eliminarTarea,\n        guardarTareaActual,\n        actualizarTarea,\n        limpiarTarea,\n      }}\n    >\n      {props.children}\n    </TareaContext.Provider>\n  );\n};\n\nexport default TareaState;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Login } from \"./components/auth/Login\";\nimport { NuevaCuenta } from \"./components/auth/NuevaCuenta\";\nimport { Proyectos } from \"./components/proyectos/Proyectos\";\nimport ProyectoState from \"./context/proyectos/ProyectoState\";\nimport TareaState from \"./context/tareas/tareaState\";\n\nfunction App() {\n  return (\n    <ProyectoState>\n      <TareaState>\n        <Router>\n          <Switch>\n            <Route exact path=\"/proyectos\" component={Login} />\n            <Route exact path=\"/nueva-cuenta\" component={NuevaCuenta} />\n            <Route exact path=\"/\" component={Proyectos} />\n          </Switch>\n        </Router>\n      </TareaState>\n    </ProyectoState>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}